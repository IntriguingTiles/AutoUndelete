//
//     Generated by class-dump 3.5 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import "RKVotable.h"

@class NSArray, NSDate, NSDictionary, NSString, NSURL, RKLinkEmbeddedMedia;

@interface RKLink : RKVotable
{
    _Bool _archived;
    _Bool _hidden;
    _Bool _NSFW;
    _Bool _saved;
    _Bool _selfPost;
    _Bool _stickied;
    _Bool _visited;
    _Bool _spoiler;
    _Bool _locked;
    _Bool _isGallery;
    NSString *_title;
    NSString *_domain;
    NSURL *_URL;
    NSURL *_permalink;
    NSString *_author;
    double _upvoteRatio;
    NSDate *_edited;
    unsigned long long _gilded;
    NSString *_distinguished;
    NSString *_approvedBy;
    NSString *_bannedBy;
    NSString *_selfText;
    NSString *_selfTextHTML;
    NSString *_subreddit;
    NSString *_subredditFullName;
    RKLinkEmbeddedMedia *_media;
    NSURL *_thumbnailURL;
    NSArray *_previewImages;
    unsigned long long _totalComments;
    unsigned long long _totalReports;
    NSString *_authorFlairClass;
    NSString *_authorFlairText;
    NSString *_linkFlairClass;
    NSString *_linkFlairText;
    NSString *_suggestedSort;
    NSDictionary *_redditVideoService;
    NSDictionary *_crosspostRedditVideoService;
    NSDictionary *_galleryMetadata;
    NSDictionary *_galleryData;
}

+ (id)crosspostRedditVideoServiceJSONTransformer;
+ (id)previewImagesJSONTransformer;
+ (id)mediaJSONTransformer;
+ (id)editedJSONTransformer;
+ (id)thumbnailURLJSONTransformer;
+ (id)permalinkJSONTransformer;
+ (id)URLJSONTransformer;
+ (id)titleJSONTransformer;
+ (id)totalReportsJSONTransformer;
+ (id)JSONKeyPathsByPropertyKey;

@property(retain, nonatomic) NSDictionary *galleryData; // @synthesize galleryData=_galleryData;
@property(retain, nonatomic) NSDictionary *galleryMetadata; // @synthesize galleryMetadata=_galleryMetadata;
@property(nonatomic) _Bool isGallery; // @synthesize isGallery=_isGallery;
@property(retain, nonatomic) NSDictionary *crosspostRedditVideoService; // @synthesize crosspostRedditVideoService=_crosspostRedditVideoService;
@property(retain, nonatomic) NSDictionary *redditVideoService; // @synthesize redditVideoService=_redditVideoService;
@property(copy, nonatomic) NSString *suggestedSort; // @synthesize suggestedSort=_suggestedSort;
@property(readonly, copy, nonatomic) NSString *linkFlairText; // @synthesize linkFlairText=_linkFlairText;
@property(readonly, copy, nonatomic) NSString *linkFlairClass; // @synthesize linkFlairClass=_linkFlairClass;
@property(readonly, copy, nonatomic) NSString *authorFlairText; // @synthesize authorFlairText=_authorFlairText;
@property(readonly, copy, nonatomic) NSString *authorFlairClass; // @synthesize authorFlairClass=_authorFlairClass;
@property(readonly, nonatomic) unsigned long long totalReports; // @synthesize totalReports=_totalReports;
@property(readonly, nonatomic) unsigned long long totalComments; // @synthesize totalComments=_totalComments;
@property(readonly, nonatomic) NSArray *previewImages; // @synthesize previewImages=_previewImages;
@property(readonly, copy, nonatomic) NSURL *thumbnailURL; // @synthesize thumbnailURL=_thumbnailURL;
@property(readonly, nonatomic) RKLinkEmbeddedMedia *media; // @synthesize media=_media;
@property(readonly, copy, nonatomic) NSString *subredditFullName; // @synthesize subredditFullName=_subredditFullName;
@property(readonly, copy, nonatomic) NSString *subreddit; // @synthesize subreddit=_subreddit;
@property(readonly, copy, nonatomic) NSString *selfTextHTML; // @synthesize selfTextHTML=_selfTextHTML;
@property(readonly, copy, nonatomic) NSString *selfText; // @synthesize selfText=_selfText;
@property(readonly, nonatomic) _Bool locked; // @synthesize locked=_locked;
@property(readonly, nonatomic) _Bool spoiler; // @synthesize spoiler=_spoiler;
@property(readonly, nonatomic) _Bool visited; // @synthesize visited=_visited;
@property(readonly, nonatomic) _Bool stickied; // @synthesize stickied=_stickied;
@property(readonly, nonatomic, getter=isSelfPost) _Bool selfPost; // @synthesize selfPost=_selfPost;
@property(readonly, nonatomic, getter=isSaved) _Bool saved; // @synthesize saved=_saved;
@property(readonly, nonatomic, getter=isNSFW) _Bool NSFW; // @synthesize NSFW=_NSFW;
@property(readonly, nonatomic) _Bool hidden; // @synthesize hidden=_hidden;
@property(readonly, copy, nonatomic) NSString *bannedBy; // @synthesize bannedBy=_bannedBy;
@property(readonly, copy, nonatomic) NSString *approvedBy; // @synthesize approvedBy=_approvedBy;
@property(readonly, copy, nonatomic) NSString *distinguished; // @synthesize distinguished=_distinguished;
@property(readonly, nonatomic, getter=isArchived) _Bool archived; // @synthesize archived=_archived;
@property(readonly, nonatomic) unsigned long long gilded; // @synthesize gilded=_gilded;
@property(readonly, nonatomic) NSDate *edited; // @synthesize edited=_edited;
@property(readonly, nonatomic) double upvoteRatio; // @synthesize upvoteRatio=_upvoteRatio;
@property(readonly, copy, nonatomic) NSString *author; // @synthesize author=_author;
@property(readonly, copy, nonatomic) NSURL *permalink; // @synthesize permalink=_permalink;
@property(readonly, copy, nonatomic) NSURL *URL; // @synthesize URL=_URL;
@property(readonly, copy, nonatomic) NSString *domain; // @synthesize domain=_domain;
@property(readonly, copy, nonatomic) NSString *title; // @synthesize title=_title;
- (id)shortURL;
- (_Bool)isImageLink;
- (id)description;
- (void)nrt_updateModelWithHiddenStatus:(_Bool)arg1;
- (void)nrt_updateModelWithSaveStatus:(_Bool)arg1;
- (void)nrt_setVisited:(_Bool)arg1 disableNotification:(_Bool)arg2;
- (void)nrt_setVisited:(_Bool)arg1;
- (void)nrt_switchHiddenStatusWithoutNetwork;
- (void)nrt_switchHiddenStatus;
- (void)nrt_switchSaveStatus;
- (unsigned long long)nrt_linkMediaType;
- (id)nrt_imgurAlbumId;
- (id)nrt_imgurThumbnailURL;
- (id)nrt_imgurImageURL:(_Bool)arg1;
- (id)nrt_imgurImageURL;
- (_Bool)nrt_isRedditAlbum;
- (_Bool)nrt_isImgurGallery;
- (_Bool)nrt_isImgurAlbum;
- (_Bool)nrt_isImgurImage;
- (double)nrt_heightForPreviewImageWithWidth:(double)arg1;
- (id)nrt_redditVideoServiceUrl;
- (id)nrt_redditGifUrl;
- (id)nrt_imageURLWithObfuscated;
- (id)nrt_imageURL;
- (id)nrt_image;
- (_Bool)nrt_isRedditVideoService;
- (_Bool)nrt_isVimeo;
- (_Bool)nrt_isStreamable;
- (_Bool)nrt_isYoutube;
- (_Bool)nrt_isRedditImage;
- (_Bool)nrt_isImgurDomain;
- (_Bool)nrt_isRedgifs;
- (_Bool)nrt_isGfycat;
- (_Bool)nrt_isGIF;
- (_Bool)nrt_isVideoLink;
- (_Bool)nrt_isImageOrGifLink;
- (_Bool)nrt_isImageLink;
- (id)nrt_fixedUrl;
- (id)multiredditPath;
- (id)shortenedDomain;
- (id)nrt_thumbnailURL;
- (_Bool)nrt_hasSelfPostText;
- (_Bool)nrt_hasPreviewImage;
- (_Bool)hasThumbnail;
@property(nonatomic) _Bool nrt_isHidePlaceholder; // @dynamic nrt_isHidePlaceholder;
- (id)nrt_flairText;
- (unsigned long long)nrt_linkMediaType;
- (id)nrt_imgurAlbumId;
- (id)nrt_imgurThumbnailURL;
- (id)nrt_imgurImageURL:(_Bool)arg1;
- (id)nrt_imgurImageURL;
- (_Bool)nrt_isRedditAlbum;
- (_Bool)nrt_isImgurGallery;
- (_Bool)nrt_isImgurAlbum;
- (_Bool)nrt_isImgurImage;
- (double)nrt_heightForPreviewImageWithWidth:(double)arg1;
- (id)nrt_redditVideoServiceUrl;
- (id)nrt_redditGifUrl;
- (id)nrt_imageURLWithObfuscated;
- (id)nrt_imageURL;
- (id)nrt_image;
- (_Bool)nrt_isRedditVideoService;
- (_Bool)nrt_isVimeo;
- (_Bool)nrt_isStreamable;
- (_Bool)nrt_isYoutube;
- (_Bool)nrt_isRedditImage;
- (_Bool)nrt_isImgurDomain;
- (_Bool)nrt_isRedgifs;
- (_Bool)nrt_isGfycat;
- (_Bool)nrt_isGIF;
- (_Bool)nrt_isVideoLink;
- (_Bool)nrt_isImageOrGifLink;
- (_Bool)nrt_isImageLink;

@end

